DosGamesFinder todo list

Current release - v0.1

Next Sprint (Altering the project to serve pages statically)
- Create a release tag to mark where this code was when it was a backbone project
- Create new URL pathways for static served pages
- Create class based views for new static served pages
- Write new unit tests for class based views
- Pull over the base template + navigation
- Port template for DosGameListView
- Port template for DosGameDetailView
- Port template for PublisherListView
- Write functional tests for all new views
- Set up queries for filtering genre, publisher
- Disable Django Rest API

Old Sprints - (to be refactored)
Next Sprint:
- Hook up adsense to page
- See issue above, next steps is to set up pages so that they are generated by Django Templates. This is going to be quite a large re-factor. Start a new project and re-use bits from this. 

Next Sprint (Cleaning up Backbone code):
- Instead of setting these filters below, can we set these up to be events listened to by the collection and triggered by button clicks? 
    dosgames_collection.genre_filter = genre;       
    dosgames_collection.publisher_filter = publisher; 
    dosgames_collection.current_page = page_number;

- Instead of the below code, figure out a way for the page title object to manage this internally
    if (new_page_title == null || new_page_title == undefined) {
        page_title_model.set('title', 'Games List A-Z');
    }

- Instead of running this below code in the route, can this be initialized as a global, then altered with events? 
    PageTitle = new App.Views.PageTitle({model: page_title_model});
- Any manual fetches, see if they can be replaced by events
- Filter by Genre, and filter by publisher, if the filtering is happening via events, perhaps we don't need these functions and can be built into routes? or perhaps refactored to trigger the necessary events
- Look at the Backbone DosGameListViewRow view, it has some ugly code needed to split the games into multiple collections, can this be re-factored to be cleaner? 
- 3 of our render functions call the clear view and scroll to top, can we apply DRY somehow? eg. inherit a function,  

Next Sprint:
- Implement the search bar
- Create a robots.txt file for site
- Create a sitemap.xml file for site
- Re-factor the API so that it requries a user login even for read access. just to prevent scraping from bots, of course someone with some know-how will figure this out. 
- Implement throttling and look at locust.io to do load testing (not just for load balancing, but to test API throttling too)

Next Sprint:
- Go back and write some functional tests, then set up Jenkins for CI
- Write some QUnit tests for Backbone 
- Set up affiliate links to GOG
- Would it be possible to set up affiliate links to places that sell physical box copies? 

Future ideas:
- Do we need to implement any caching
- Implement the user rating system
- Implement the year released filters and drop down menu
